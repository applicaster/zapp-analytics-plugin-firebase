apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28

        versionCode 4
        versionName "3.0.1"

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { // Applicaster
        credentials {
            username System.getenv("MAVEN_USERNAME")
            password System.getenv("MAVEN_PASSWORD")
        }
        url 'https://dl.bintray.com/applicaster-ltd/maven'
    }
}

dependencies {

    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if (devSDK != null) {
        implementation project(':applicaster-android-sdk')
    } else {
        api ('com.applicaster:applicaster-android-sdk:6.1.0') {
            exclude group:    'com.applicaster', module: 'react-native'
        }

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:1.10.19'
        testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
        testImplementation 'org.robolectric:robolectric:3.1'
    }
    // pick consistent Firebase libraries versions using BoM
    // https://firebase.google.com/docs/android/setup#firebase-bom
    api platform('com.google.firebase:firebase-bom:24.4.0')
    api 'com.google.firebase:firebase-core:+'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.11'
    testImplementation "org.assertj:assertj-core:1.7.0"
    testImplementation 'org.robolectric:robolectric:3.3.2'

}

//---------------------------------- Bintray ----------------------------------//

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--match', 'android-*', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        def tag = stdout.toString().trim()
        String[] arr = tag.split('-')
        if (arr.length > 1) {
            return arr[1]
        }
        return arr[0]
    }
    catch (ignored) {
        println 'catch'
        return null
    }
}

def compareVersions = { versionFromTag, versionFromProps ->
    return versionFromTag == versionFromProps
}

project.afterEvaluate {

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId GROUP

                def versionFromTag = getVersionName()
                if (versionFromTag != null) {
                    // Check if version from tag equals to version from properties
                    if (!compareVersions(versionFromTag, VERSION))
                        throw new Exception("Incomparable version value from tag and properties!")

                    // There is a tag existing on the current commit - we can upload to Bintray
                    version versionFromTag

                    artifactId ARTIFACT_ID
                    artifact("build/outputs/aar/${project.getName()}-release.aar") {
                        builtBy assemble
                    }
                    artifact androidJavadocsJar
                    artifact androidSourcesJar
                    pom.withXml {
                        Node root = asNode()
                        root.appendNode('name', ARTIFACT_ID)
                        root.appendNode('description', POM_DESCRIPTION)
                        root.appendNode('url', POM_URL)

                        def issues = root.appendNode('issueManagement')
                        issues.appendNode('system', 'github')
                        issues.appendNode('url', ISSUE_URL)

                        def scm = root.appendNode('scm')
                        scm.appendNode('url', POM_SCM_URL)
                        scm.appendNode('connection', POM_SCM_CONNECTION)
                        scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                        def license = root.appendNode('licenses').appendNode('license')
                        license.appendNode('name', POM_LICENCE_NAME)
                        license.appendNode('url', POM_LICENCE_URL)
                        license.appendNode('distribution', POM_LICENCE_DIST)

                        def developer = root.appendNode('developers').appendNode('developer')
                        developer.appendNode('id', POM_DEVELOPER_ID)
                        developer.appendNode('name', POM_DEVELOPER_NAME)
                        developer.appendNode('email', POM_DEVELOPER_EMAIL)

                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.compile.allDependencies.each {
                            if (!it.name.is('unspecified')) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                        configurations.api.allDependencies.each {
                            if (!it.name.is('unspecified')) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                        configurations.implementation.allDependencies.each {
                            if (!it.name.is('unspecified')) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
        }
    }
}

static def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

static def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    override = true
    pkg {
        repo = 'maven_plugins'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version {
            name = getVersionName()
            vcsTag = 'v' + getVersionName()
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives androidJar
}
